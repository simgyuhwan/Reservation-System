spring:
  profiles:
    active:
      - dev

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger

---

server:
  port: 0

spring:
  config:
    activate:
      on-profile: dev
  application:
    name: event-service
  datasource:
    url: jdbc:mysql://${DB_URL}:${DB_PORT}/${DB_TABLE}?serverTimezone=Asia/Seoul
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_ID}
    password: ${DB_PW}
  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
    generate-ddl: true
    database: mysql
    database-platform: org.hibernate.dialect.MySQL57Dialect
    ## Debug \uC6A9
  #    show-sql: true

  #Redis
  data:
    redis:
      cluster:
        nodes:
          - localhost:6379
          - localhost:6380
          - localhost:6381

  #kafka
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
      function:
        definition: performanceCreatedEventConsumer;performanceCreatedEvent;performanceCreatedEventResult
#      #bindings
      bindings:
        # Performance Created Event
        performanceCreatedEventConsumer-in-0:
          destination: performance-service.performance.created
          consumer:
            maxAttempts: 3
            backOffInitialInterval: 100
        performanceCreatedEventConsumer-out-0:
          destination: event-service.performance.created
        performanceCreatedEvent-out-0:
          destination: event-service.performance.created
          content-type: application/json

        performanceCreatedEventResult-in-0:
          destination: reservation-service.performance.created.result
        performanceCreatedEventResult-out-0:
          destination: event-service.performance.created.result
          content-type: application/json

#loging
logging:
  level:
    org:
      hibernate:
        SQL: DEBUG

#Eureka
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

#Actuator
management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, bus, refresh

